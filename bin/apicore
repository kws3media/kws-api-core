#!/usr/bin/env php
<?php

use \Kws3\ApiCore\Utils\ConsoleColor;

set_error_handler(function ($num, $str, $file, $line) {
  output($str, true);
  output($file . ':' . $line, true);
});

$wd = getcwd();

//this autoloads classes from "vendor" dir if vendor dir exists
$composer_path = $wd . '/composer.json';
$vendor_autoload = $wd . '/vendor/autoload.php';
if (is_readable($composer_path)) {
  $composer = file_get_contents($composer_path);
  $composer = json_decode($composer, true);
  if (array_key_exists('config', $composer)) {
    if (array_key_exists('vendor-dir', $composer['config'])) {
      $vendor_autoload = $wd . '/' . $composer['config']['vendor-dir'] . '/autoload.php';
    }
  }
}

if (is_readable($vendor_autoload)) {
  require_once($vendor_autoload);
}

ob_implicit_flush(true);
error_reporting(E_ALL & ~E_NOTICE);



$CONFIG = [
  'runners_namespaces' => [
    '\\Kws3\\ApiCore\\Runners' => __DIR__ . '/../src/'
  ],
  'Test' => [
    'namespace' => 'Kws3\ApiCore\Tests',
    'base_namespace' => '\Kws3\ApiCore\Test\Base',
    'folder' => $wd . '/Tests',
    'bootstrap_file' => $wd . '/Tests/_bootstrap.php',
  ]
];


//load bootstrap file with configurations
$configPath = fixPath($wd . '/config/apicore.php');
if (file_exists($configPath)) {
  $repoConfig = require_once $configPath;

  //patch runners_namespaces by merging both default and incoming values
  if (array_key_exists('runners_namespaces', $repoConfig)) {
    $repoConfig['runners_namespaces'] = array_merge($repoConfig['runners_namespaces'], $CONFIG['runners_namespaces']);
  }

  $CONFIG = $repoConfig + $CONFIG;
}

//this autoloads classes from current folder
spl_autoload_register(function ($class) use ($CONFIG) {
  $file = preg_replace('#\\\#', '/', $class) . '.php';
  $validNs = ['Runners', 'Generators'];
  $baseNsParts = explode('/', $file);
  $baseNS = array_shift($baseNsParts);
  if (!in_array($baseNS, $validNs)) {
    return;
  }

  if (stream_resolve_include_path($file)) {
    require $file;
  } else {
    foreach ($CONFIG['runners_namespaces'] as $ns => $folder) {
      if (stream_resolve_include_path($folder . $file)) {
        require $folder . $file;
        break;
      }
    }
  }
});

array_shift($argv);

$class_to_run = array_shift($argv);

$runnerClass = null;
foreach ($CONFIG['runners_namespaces'] as $ns => $folder) {
  if (class_exists($ns . "\\" . $class_to_run)) {
    $runnerClass = $ns . "\\" . $class_to_run;
    break;
  }
}

if ($runnerClass) {
  $runner = new $runnerClass($CONFIG);
  if (isset($argv[0]) && $argv[0] == 'help') {
    $runner->help();
  } else {
    $runner->run($argv);
  }
} else {
  output("$class_to_run runner not found", true);
}


function output($msg, $err = null)
{
  if ($err == true) {
    echo ConsoleColor::error(" " . $msg . " ") . "\n";
  } elseif ($err === false) {
    echo ConsoleColor::success(" " . $msg . " ") . "\n";
  } else {
    echo $msg . "\n";
  }
  if (ob_get_level() > 0) {
    ob_flush();
    ob_end_flush();
  }
  flush();
}

function fixPath($path)
{
  $ds = DIRECTORY_SEPARATOR;
  return str_replace(['/', '\\'], $ds, $path);
}
