<?php

namespace Models;

use \Exceptions\HTTPException;
use Kws3\ApiCore\Loader;

class %s extends \Models\Base\%s
{
  public $castDepth = [
    '*' => 0
  ];


  public static function listAll($offset, $limit, $filters = null, $opts = [])
  {

    $model = new self;
    $metadata = Loader::getMetaDataProvider();

    $query = '';
    $bindings = [];

    $results = [];
    $total = 0;

    $qobj = self::filteredQuery($filters, $query, $bindings);

    $total = $model->count($qobj);
    $results = $model->find($qobj, ['offset' => $offset, 'limit' => $limit, 'order' => 'id ASC']);

    $metadata->setTotal($total);

    return empty($results) ? [] : $results->castAll($model->castDepth);
  }

  public static function getOne($id, $internal = false)
  {
    $model = new self;
    $identity = Loader::getIdentity();

    $model->load([
      $model->primary . ' = ? AND `deleted` <> 1',
      $id
    ]);

    if (!$model->dry()) {
      return $internal ? $model : $model->cast(null, $model->castDepth);
    }

    throw new HTTPException('Not Found.', 404);
  }

  public static function put($id, $payload)
  {
    $model = new self;

    $valid = true;

    //this ensures you can edit entities that you have permission to see
    $existing = self::getOne($id, true);

    $fields = [];

    //normal props
    $existing->copyfrom($payload, $fields);

    //normal sanity checks
    $mandatoryFields = [];

    $valid = self::checkMandatoryFields($existing, $mandatoryFields);

    if ($valid) {
      $existing->save();
      return $existing->cast(null, $model->castDepth);
    }

    throw new HTTPException('Bad Request.', 400, array(
        'dev' => 'All required fields may not have been filled in',
        'internalCode' => '',
        'more' => '',
      )
    );
  }

  public static function create($payload)
  {

    $model = new self;

    $valid = true;

    $fields = [];

    //normal props
    $model->copyfrom($payload, $fields);

    //normal sanity checks
    $mandatoryFields = [];

    $valid = self::checkMandatoryFields($model, $mandatoryFields);

    if ($valid) {
      $model->save();
      return $model->cast(null, $model->castDepth);
    }

    throw new HTTPException('Bad Request.', 400, array(
        'dev' => 'All required fields may not have been filled in',
        'internalCode' => '',
        'more' => '',
      )
    );
  }

  public static function delete($id)
  {
    //this ensures you can delete entities that you have permission to see
    $existing = self::getOne($id, true);
    $casted = $existing->cast(null, 0);
    $existing->erase();

    return $casted;
  }

}
